type Cliente {
  id: ID
  nombre: String
  apellido: String
  empresa: String
  emails: [Email]
  edad: Int
  tipo: TipoCliente
  pedidos: [Pedido]
}
type Pedido {
  producto: String
  precio: Int
}
enum TipoCliente {
  BASICO
  PREMIUM
}
type Email {
  email: String
}
type Producto {
  id: ID
  nombre: String
  precio: Int
  stock: Int
}

type Query {
  # Dejar limite opcional para poder obviarlo y traer todos los clientes
  getClientes(limite: Int, offset: Int): [Cliente]
  getCliente(id: ID): Cliente
  totalClientes: Int
  getProductos(limite: Int, offset: Int): [Producto]
  getProducto(id: ID): Producto
  totalProductos: Int
}
input ClienteInput {
  id: ID
  nombre: String!
  apellido: String!
  empresa: String
  emails: [EmailInput]
  edad: Int
  tipo: TipoCliente
  pedidos: [PedidoInput]
}
input PedidoInput {
  producto: String
  precio: Int
}
# Este comentario se ignora
input EmailInput {
  email: String
}
input ProductoInput {
  id: ID
  nombre: String!
  precio: Int!
  stock: Int!
}

"""
Mutations para crar nuevos clientes
"""
type Mutation {
  """
  Te permite crear nuevos clientes en la base de dastos
  """
  crearCliente(input: ClienteInput): Cliente
  actualizarCliente(input: ClienteInput): Cliente
  eliminarCliente(id: ID!): String
  nuevoProducto(input: ProductoInput): Producto
  actualizarProducto(input: ProductoInput): Producto
  eliminarProducto(id: ID!): String
}
